# 13.2 正则表达式之元字符的匹配
# 正则表达式是一种用于匹配和处理字符串的强大工具。在正则表达式中，有一些特殊字符被称为元字符，它们具有特殊的含义。

# 字符串前面带上r标记，表示转义字符无效，作为普通字符使用。

import re       # 导入re模块

# 13.2.1 常用的单字符匹配规则：
# 1、\d 匹配任意数字字符（0-9）
# 2、\D 匹配任意非数字字符
# 3、\s 匹配任意空白字符（空格、制表符、换行符等）
# 4、\S 匹配任意非空白字符
# 5、\w 匹配任意单词字符（字母、数字、下划线）
# 6、\W 匹配任意非单词字符
# 7、. 匹配任意单个字符（除了换行符）
# 8、[] 匹配[]中举例字符

name = "dourabne12@qq.com"
re_name = re.findall(r"\w", name)  # 字符串前面带上r标记，表示转义字符无效
print(re_name)

# 使用正则表达式re.findall()函数中[]匹配规则查找字符串name中所有小写字母
re_name1 = re.findall(r"[a-zA-Z0-9]", name)  # 也可以使用[a-z]、[dob1@]等
# 打印结果
print(re_name1)

# 13.2.2 常用的数量匹配规则

# 1、 * 匹配前面的字符（元字符）0次或多次。例如，a*可以匹配aa、aab、a等。
# 2、 + 匹配前面的字符（元字符）1次或多次。例如，a+可以匹配a、aa、aab等。
# 3、 ? 匹配前面的字符（元字符）0次或1次。例如，a?可以匹配a、ab等。
# 4、 {m} 匹配前面的字符（元字符）m次。例如，a{3}可以匹配aaa。
# 5、 {m,} 匹配前面的字符（元字符）m次或多次。例如，a{2,}可以匹配aa、aab等。
# 6、{m,n} 匹配前面的字符（元字符）m到n次。例如，a{2,3}可以匹配aa、aab、aac等。

# 下面例子：匹配账号，只能出现字母和数字，长度为8到12之间字符
r = r"(^[0-9a-zA-Z]{8,12}$)"
# ^是指从头开始匹配，[0-9a-zA-Z]是指从0-9、a-z、A-Z之间匹配，{8,12}是指长度为8-12之间数量匹配，$是指匹配到尾结束
name = "douraben123"
r_name = re.findall(r, name)  # 若未能匹配返回空列表
print(r_name)

# 13.2.3 常用的边界匹配规则
# 1、 ^ 匹配字符串的开头。例如，^hello可以匹配以hello开头的字符串。
# 2、 $ 匹配字符串的结尾。例如，‘world可以匹配以world`结尾的字符串。
# 3、 \B 匹配非单词的边界
# 4、 \b 匹配一个单词边界
# 5、 \ 转义特殊字符

# 下面例子：QQ账号匹配，长度为5到11之间，第一位不能为零
rr = "^[1-9][0-9]{4,10}$"
# ^是指从头开始匹配，[1-9]是指第一位1-9之间匹配，[0-9]是指第二位开始0-9之间匹配，{4,10}是指第二位开始长度为4-10之间数量匹配，$是指匹配到尾结束
name1 = "553637368"
rr_name1 = re.findall(rr, name1)
print(rr_name1)

# 13.2.4 常用的分组匹配规则
# 1、| 匹配左右任意一个表达式
# 2、() 将括号中的字符作为一个分组
# 下面例子：邮箱地址匹配 ,qq、163、yoghurt等
# 如：内容.内容@qq.内容.内容--> Dou.raben@qq.com.cn
r_emil = r"(^[\w]+(\.[\w]+)*@(qq|163|baidu)(\.[\w]+)+$)"

name_emil = "553637368@qq.com"
re_emil = re.findall(r_emil, name_emil)
print(re_emil)
